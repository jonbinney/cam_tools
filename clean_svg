#!/usr/bin/env python
import sys
import re
import xml.etree.ElementTree as ET
import numpy as np
from scipy import linalg

class MoveTo:
    def __init__(self, points):
        assert(len(points) > 0)
        self.points = np.array(points)

    @staticmethod
    def from_tokens(tokens):
        points = []
        for tok in tokens:
            points.append([float(s) for s in tok.split(',')])
        return MoveTo(points)

    def get_start(self):
        return self.points[0]

    def get_end(self):
        return self.points[-1]

    def scale(self, scale_factor):
        self.points *= scale_factor

    def extend(self, other_move_to):
        self.points = np.concatenate([self.points, other_move_to.points])

    def __repr__(self):
        return ' '.join(['M'] + ['{},{}'.format(*p) for p in self.points])

class Arc:
    def __init__(
        self, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, x, y):

        self.rx = rx
        self.ry = ry
        self.x_axis_rotation = x_axis_rotation
        self.large_arc_flag = large_arc_flag
        self.sweep_flag = sweep_flag
        self.x = x
        self.y = y

    @staticmethod
    def from_tokens(tokens):
        rx, ry = [float(s) for s in tokens[0].split(',')]
        x, y = [float(s) for s in tokens[4].split(',')]
        return Arc(
            rx = rx,
            ry = ry,
            x_axis_rotation = float(tokens[1]),
            large_arc_flag = int(tokens[2]),
            sweep_flag = int(tokens[3]),
            x = x,
            y = y,
            )

        points = []
        for tok in tokens:
            points.append([float(s) for s in tok.split(',')])
        return MoveTo(points)

    def get_start(self):
        raise RuntimeError(
            'Arc start is implicitly defined by command before it')

    def get_end(self):
        return np.array((self.x, self.y))

    def scale(self, scale_factor):
        self.rx *= scale_factor
        self.ry *= scale_factor
        self.x *= scale_factor
        self.y *= scale_factor

    def __repr__(self):
        return '{},{} {} {} {} {},{}'.format(
            self.rx,
            self.ry,
            self.x_axis_rotation,
            self.large_arc_flag,
            self.sweep_flag,
            self.x,
            self.y)

class Arcs:
    def __init__(self, arcs_list):
        assert(len(arcs_list) > 0)
        self.arcs_list = arcs_list

    @staticmethod
    def from_tokens(tokens):
        assert(len(tokens) % 5 == 0)
        arcs_list = []
        for start_i in range(0, len(tokens), 5):
            args = tokens[start_i:start_i+5]
            arcs_list.append(Arc.from_tokens(args))
        return Arcs(arcs_list)

    def get_start(self):
        raise RuntimeError(
            'Arcs start is implicitly defined by command before it')

    def get_end(self):
        return self.arcs_list[-1].get_end()

    def scale(self, scale_factor):
        for arc in self.arcs_list:
            arc.scale(scale_factor)

    def __repr__(self):
        return ' '.join(['A'] + [str(arc) for arc in self.arcs_list])

class ClosePath:
    def __init__(self):
        pass

    @staticmethod
    def from_tokens(tokens):
        return ClosePath()

    def get_start(self):
        raise RuntimeError(
            'Closepath start is implicitly defined by command before it')

    def get_end(self):
        raise RuntimeError(
            'Closepath end is implicitly defined by command before it')

    def scale(self, scale_factor):
        pass

    def __repr__(self):
        return 'z'

class Path:
    def __init__(self, commands):
        assert(len(commands) > 0)
        self.commands = commands

    def get_start(self):
        return self.commands[0].get_start()

    def get_end(self):
        if isinstance(self.commands[-1], ClosePath):
            return self.commands[-2].get_end()
        else:
            return self.commands[-1].get_end()

    def scale(self, scale_factor):
        for command in self.commands:
            command.scale(scale_factor)

    def extend(self, other_path):
        if isinstance(self.commands[-1], ClosePath):
            del self.commands[-1]

        for command in other_path.commands:
            prv_command = self.commands[-1]

            # To get a connected path, commands need to be connected
            if isinstance(prv_command, MoveTo) and isinstance(command, MoveTo):
                prv_command.extend(command)
            else:
                self.commands += other_path.commands

    def ensure_closed(self):
        if not isinstance(self.commands[-1], ClosePath):
            self.commands.append(ClosePath())

    def __repr__(self):
        return '    <path d="{}"/>'.format(
            ' '.join([str(command) for command in self.commands]))

def parse_path_data(path_data_str):

    tokens = path_data_str.split()

    type_indices = []
    for tok_i, tok in enumerate(tokens):
         if re.match('[a-zA-Z]', tok):
             type_indices.append(tok_i)
    type_indices.append(len(tokens)) # Just to make the next loop simpler

    commands = []
    for ii_ii, ii in enumerate(type_indices[:-1]):
        command_type = tokens[ii]
        ii_next = type_indices[ii_ii+1]
        args = tokens[ii+1:ii_next]

        if command_type == 'M':
            commands.append(MoveTo.from_tokens(args))
        elif command_type == 'A':
            commands.append(Arcs.from_tokens(args))
        elif command_type == 'z':
            commands.append(ClosePath.from_tokens(args))
        else:
            raise RuntimeError('Unrecognized command type: {}'.format(
                command_type))
    return Path(commands)

def parse_paths_in_group(group_node):
    global paths

    for child in group_node:
        # inkscape outputs {http://www.w3.org/2000/svg}path for a "path" tag
        if child.tag[-4:] == 'path':
            paths.append(parse_path_data(child.get('d')))

def find_paths_to_merge(paths):
    for path_a_i, path_a in enumerate(paths):
        for path_b_i, path_b in enumerate(paths):
            if path_a_i is path_b_i:
                continue

            d = linalg.norm(path_a.get_end() - path_b.get_start())
            if d == 0.0:
                return path_a_i, path_b_i
    return None, None

def merge_paths(paths):
    # Incredibly inefficient way to do this... I belive this has running time
    # which is quadratic in the number of paths
    while True:
        path_a_i, path_b_i = find_paths_to_merge(paths)
        if path_a_i is None:
            return paths

        paths[path_a_i].extend(paths[path_b_i])
        del paths[path_b_i]

def parse_recursive(node):
    # Inkscape puts all the actual drawing paths inside of a "g" tag. We only
    # want these; we ignore the page border paths, for example.
    # Inkscape uses "{http://www.w3.org/2000/svg}g" for a group
    if node.tag[-2:] == '}g':
        parse_paths_in_group(node)
        return

    for child in node:
        parse_recursive(child)

input_filename = sys.argv[1]
paths = []

# Easel's SVG import undersizes paths by a consistent (but mysterious) amount.
# This was calculated by importing a square of known size into easel and
# checking its dimensions.
easel_magic_scale_factor = 200.0 / 187.50

tree = ET.parse(input_filename)
root = tree.getroot()

print( '<?xml version="1.0" encoding="UTF-8" standalone="no"?>')
print('<svg>')
parse_recursive(root)
paths = merge_paths(paths)
for path in paths:
    path.ensure_closed()
    path.scale(easel_magic_scale_factor)
    print(str(path))
print('</svg>')
